<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/c"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 与上面的配置等价，下面的更容易理解 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations"> <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
			<array>
				<value>classpath:dynamicsite.properties</value>
			</array>
		</property>
	</bean>

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="jdbc:mysql://localhost:3306/dynamicsite" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="3" /> 
		<property name="maxActive" value="20" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!--spring 和mybatis集成需要一个sqlsessionfactory 和至少一个数据库映射器类-->
	<!-- MyBatis begin -->
	<!--sqlsessionfactory需要一个datasource-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
       <!--  <property name="typeAliasesPackage" value="com.lovech.dynamicsite"/> -->
		<!--   <property name="typeAliasesSuperType" value="com.thinkgem.jeesite.common.persistence.BaseEntity"/> -->
		<property name="mapperLocations" value="classpath:mappings/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
    </bean>
    <!--至少需要一个数据映射器类-->
    <!--没有必要在spring的配置文件中注册所有的映射器-->
    <!--MapperFactoryBean使用的是代理模式，创建的代理类实现了UserMapper接口，直接注入到应用程序中。
    代理创建在运行时，所以制定的映射器必须是一个接口而不是实现类-->
	<!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.lovech.dynamicsite.mapper.UserMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>-->
    <!--使用一个MapperScannerConfigurer,会查找类路径下的映射器并自动将他们创建成MapperFactoryBean-->
    <!--MapperScannerConfigurer 属性不支持使用了 PropertyPlaceholderConfigurer 的属性替换,因为会在 Spring 其中之前来它加载。
    但是,你可以使用 PropertiesFactoryBean 和 SpEL 表达式来作为替代-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--可以使用分号或者逗号创建多于一个包的路径-->
        <property name="basePackage" value="com.lovech.dynamicsite.mapper" />
        <!--同样需要配置sqlsessionfactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean> 
    
     <!-- 配置事务管理器,使用spring 中的事务管理器配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
   
</beans>
